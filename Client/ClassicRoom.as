package  {	import flash.display.MovieClip;	import flash.events.KeyboardEvent;	import flash.events.Event;	/*ClassicRoom		implemente toues les métodes de base d'un room Classic	*/	public class ClassicRoom extends MovieClip implements Room {		//Conteneur de la room		public var fenetre:Fenetre;		//Notre Client		public var currentUser:User;		//Tableau des objets des calques		public var tabAffiche:Array = new Array(); 		public var buffUser:User;		public var i:Number=0;		//Touche de direction		public var TG:Boolean = false;		public var TH:Boolean = false;		public var TD:Boolean = false;		public var TB:Boolean = false;		//Client en mouvement ?		public var mouv:Boolean= true;		public var vitesse_p:Number = 6;		public var xx=0;		public var yy=0;		public var pii:Number=2;		public var collisionRect:Boolean; 				public function ClassicRoom() {		}				public function afficherThis(){			fenetre.addChild(this);			fenetre.instanceDialBox();			fenetre.instanceLesCo();			fenetre.instanceGoMAp();			addNew(fenetre.id,fenetre.pseudo,fenetre.xx,fenetre.yy,fenetre.grade);		}				public function effacerThis(){			fenetre.removeEventListener(KeyboardEvent.KEY_DOWN,touche_e);//Ecoute lorsqu'une touche est enfoncé			fenetre.removeEventListener(KeyboardEvent.KEY_UP,touche_r);//Ecoute lorsqqu'une touche est relaché			fenetre.removeEventListener(Event.ENTER_FRAME, deplacer_p);//Fonction lancé en permanance 			fenetre.removeChild(this);		}				//Cree le client , l'ajoute dans le tableau d'affichage , l'ajoute dans le module des connectés		public function addNew(id:Number,pseudo:String,posX:Number,posY:Number,grade:Number){			this.currentUser = new User(this,id,pseudo,posX,posY,grade);			tabAffiche.push(currentUser);			this.TriAff();			fenetre.lesCo.addP(pseudo); // ajoute le pseudo dans la fenetre des connecté		}				//Cree un client extérieur, l'ajoute dans le tableau d'affichage , l'ajoute dans le module des connectés		public function addPre(id:Number,pseudo:String,X:Number,Y:Number,grade:Number){			this.buffUser = new User(this,id,pseudo,X,Y,grade);			tabAffiche.push(buffUser);			fenetre.lesCo.addP(pseudo); // ajoute le pseudo dans la fenetre des connecté			this.TriAff();		}				//Retir et suprime un joueur graphiquement et dans la méméoire		public function removeClient(id:Number){			i = chercheId(id);			fenetre.lesCo.suppP(tabAffiche[i].pseudo); // retir le pseudo dans la fenetre des connecté			(tabAffiche[i] as User).effacerThis();			tabAffiche[i]=null;			tabAffiche.splice(i,1);		}				//Deplace un user sur l'ecran		public function userDepla(id,x,y){			//On cherche sa position dans le tableau des clients			i = chercheId(id);			//On modifie ses position x et y			tabAffiche[i].setX(tabAffiche[i].getX()+x);			tabAffiche[i].setY(tabAffiche[i].getY()+y);			//On recupere sa position dans le calque			i = this.getChildIndex(tabAffiche[i]);			//On le swap si nessessaire			if( y<0 && this.getChildAt(i).y <this.getChildAt(i-1).y){				this.swapChildrenAt(i,i-1);			}else if(y>0 && i < (this.numChildren-1) && this.getChildAt(i).y>this.getChildAt(i+1).y){				this.swapChildrenAt(i,i+1);			}		}		//Gere les touches directionelle enfonceé par le client		public function touche_e(e:KeyboardEvent){		switch (e.keyCode)			{				case 37 :					TG = true;					mouv = true;					break;				case 38 :					TH = true;					mouv = true;					break;				case 39 :					TD = true;					mouv = true;					break;				case 40 :					TB = true;					mouv = true;					break;				Default:break;			}		}		//Gere les touches directionelle relaché par le client		public function touche_r(e:KeyboardEvent){			switch (e.keyCode)			{				case 37 :					TG = false;					break;				case 38 :					TH = false;					break;				case 39 :					TD = false;					break;				case 40 :					TB = false;					break;				Default:break;			}			//Indique au server que le déplacemet du client est fini ( x1 )			if((!(TG && TH && TD && TB)) && mouv){				fenetre.scene.connexion.sendText("DEPLA="+0+"="+0);				mouv = false;			}		}		//Gere le déplacement du client		public function deplacer_p(event:Event){						//Scroll Map			if(currentUser.x > ((3*stage.stageWidth)/4) + xx){				this.x-=(stage.stageWidth/4);				xx+=(stage.stageWidth/4);							}else if(currentUser.x < (stage.stageWidth/4) +xx) {				this.x+=(stage.stageWidth/4);				xx-=(stage.stageWidth/4);			}else if(currentUser.y > ((3*stage.stageHeight)/4) + yy){				this.y-=(stage.stageHeight/4);				yy+=(stage.stageHeight/4);			}else if(currentUser.y < (stage.stageHeight/4) + yy ){				this.y+=(stage.stageHeight/4);				yy-=(stage.stageHeight/4);							}						if(TG || TD || TH || TB){							if (TG){					collisionRect =  CollisionDetection.testCollision((fenetre.currentRoom as RoomAccueil).mur, currentUser.ombre.collision.g,this);				if(collisionRect ){					currentUser.gotoAndPlay(pii++);				}			    else{					userDepla(currentUser.id,-vitesse_p,0);					currentUser.gotoAndPlay(pii++);				 	fenetre.scene.connexion.sendText("DEPLA="+2+"="+0);				}			}			else if (TD){				collisionRect =  CollisionDetection.testCollision((fenetre.currentRoom as RoomAccueil).mur, currentUser.ombre.collision.d,this);				if(collisionRect)					currentUser.gotoAndPlay(pii++);			    else{					userDepla(currentUser.id,vitesse_p,0);					currentUser.gotoAndPlay(pii++);					fenetre.scene.connexion.sendText("DEPLA="+1+"="+0);				}			}			else if (TH){				collisionRect =  CollisionDetection.testCollision((fenetre.currentRoom as RoomAccueil).mur, currentUser.ombre.collision.h,this);				if(collisionRect)					currentUser.gotoAndPlay(pii++);			    else{					userDepla(currentUser.id,0,-vitesse_p);					currentUser.gotoAndStop(pii++);					fenetre.scene.connexion.sendText("DEPLA="+0+"="+2);				}			}			else if (TB){				collisionRect =  CollisionDetection.testCollision((fenetre.currentRoom as RoomAccueil).mur, currentUser.ombre.collision.b,this);				 if(collisionRect)					currentUser.gotoAndPlay(pii++);				else{					userDepla(currentUser.id,0,vitesse_p);					currentUser.gotoAndStop(pii++);					fenetre.scene.connexion.sendText("DEPLA="+0+"="+1);				}				}			}else{				currentUser.gotoAndStop(0);			}			if(pii==13){				pii=2;			}		}				//Gere le déplacmeent des autres clients		public function deplacer_e(id,x,y){						    if( x<0 ){					userDepla(id,-vitesse_p,0);					tabAffiche[chercheId(id)].gotoAndPlay(pii++);									}			    else if(x>0){					userDepla(id,vitesse_p,0);					tabAffiche[chercheId(id)].gotoAndPlay(pii++);									}						    else if(y<0) {					userDepla(id,0,-vitesse_p);					tabAffiche[chercheId(id)].gotoAndPlay(pii++);									}				else if(y>0){					userDepla(id,0,vitesse_p);					tabAffiche[chercheId(id)].gotoAndPlay(pii++);															}else{				tabAffiche[chercheId(id)].gotoAndStop(0);			}			if(pii==13)			pii=2;		}		public function TriAff(){				tabAffiche.sort( triIso );				afficheJ();		}				//Fonction tri				function triIso( clip1:MovieClip, clip2:MovieClip ):int		{       		 var resultat:int;      		 if ( clip1.y <  clip2.y ){				resultat = -1; 			 }       		 else if ( clip1.y >  clip2.y ){				resultat = 1;			 }                      		 else                resultat = 0;       		 return resultat;		}				public function afficheJ(){			for ( var n:int=0 ; n<tabAffiche.length ; n++ ){				this.addChild( tabAffiche[n] );			}		}				public function chercheId(id:Number){			for(var i:int=0;i<tabAffiche.length;i++){								if(tabAffiche[i].toString() == "[object User]") {					if(tabAffiche[i].id == id){						return i;											}				}			}		}	}}